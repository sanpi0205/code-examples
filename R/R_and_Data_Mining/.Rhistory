library(lars)
library(car)
data(diabetes)
install.packages('lars')
install.packages('car')
library(lars)
library(car)
data(diabetes)
x = diabetes$x
x2 = diabetes$x2
y = diabetes$y
test = data.frame(cbind(diabetes$y, diabetes$x2))
colnames(test) = c('y',colnames(diabetes$x2))
## 岭回归
library(ridge)
install.packages('ridge')
library(ridge)
?linearRidge
a = linearRidge(y~., test)
summary(a)
?lars
lars(x2,y)
laa = lars(x2, y)
plot(laa)
summary(lara)
summary(laa)
laa$Cp
class(laa$Cp)
mode(laa$Cp)
attr(laa$Cp)
length(laa$Cp)
plot(laa$Cp)
which.min(laa$Cp)
laa$R2
which.max(laa$R2)
laa$beta
class(laa$beta)
summary(laa)
dim(laa$beta)
length(laa$Cp)
laa$beta[15,]
sum(laa$beta[15,]>0)
sum(laa$beta[15,] == 0)
dim(laa$beta)
sum(laa$beta[15,] != 0)
cva = cv.lars(x2, y , k=10)
?cv.lars
cva = cv.lars(x2, y , K=10)
summary(cva)
cva$index
cva$cv
cva$cv.error
?coef.lars
plot(cva$index)
plot(cva$cv.error)
plot(cva$mode)
cva$mode
plot(cva$cv)
plot(cva$cv.error)
coef.lars(laa,s=14)
which.min(cva$cv)
which.min(cva$cv.error)
plot(cva)
summary(cva)
plot(laa)
laa$mu
summary(laa)
best = cva$index[which.min(cva$cv)]
best
cv_best_coef = coef.lars(laa, s=best, mode="fraction")
cp_best_coef = laa$beta[indicator,] # 注意最小值可能不止一个，需要确定
indicator = which.min(laa$Cp)
# 获取模型系数
cp_best_coef = laa$beta[indicator,] # 注意最小值可能不止一个，需要确定
cv_best_coef
rbind(cp_best_coef,cv_best_coef)
sum(cp_best_coef != 0)
sum(cv_best_coef != 0)
cva = cv.lars(x2, y , K=10)
best = cva$index[which.min(cva$cv)]
cv_best_coef = coef.lars(laa, s=best, mode="fraction")
sum(cp_best_coef != 0)
sum(cv_best_coef != 0)
which.min(cva$cv)
cv_best_coef = laa$beta[6,]
sum(cv_best_coef != 0)
cva = cv.lars(x2, y , K=10)
best = cva$index[which.min(cva$cv)]
cv_best_coef = coef.lars(laa, s=best, mode="fraction")
# 或缺参数
# 比较cp和cv的系数
sum(cp_best_coef != 0)
sum(cv_best_coef != 0)
cva = cv.lars(x2, y , K=10)
best = cva$index[which.min(cva$cv)]
cv_best_coef = coef.lars(laa, s=best, mode="fraction")
# 或缺参数
# 比较cp和cv的系数
sum(cp_best_coef != 0)
sum(cv_best_coef != 0)
cva = cv.lars(x2, y , K=10)
best = cva$index[which.min(cva$cv)]
cv_best_coef = coef.lars(laa, s=best, mode="fraction")
# 或缺参数
# 比较cp和cv的系数
sum(cp_best_coef != 0)
sum(cv_best_coef != 0)
rbind(cp_best_coef,cv_best_coef)
install.packages('msgps')
library(msgps)
ala = msgps(x2, y, penalty = 'alasso', gamma = 1, lambda = 0)
summary(ala)
plot(ala)
?msgps
ala = msgps(x2, y, penalty = 'alasso', gamma = 1, lambda = 0)
summary(ala)
ala$stand.coef
ala$intercept
ala$dfcp_result
ala$dfcp_result$tuning
summary(ala)
ala$penalty
ala$gamma
ala$lambda
ala$tau2
plot(ala)
summary(ala)
cp.dfgps(ala)
coef(ala)
plot(ala,criterion="cp")
plot(ala,criterion="aicc")
plot(ala,criterion="bic")
dat1 = read.table("column_2C.dat")
head(dat1)
?cat
cat(file="column_2C.dat")
pairs(dat1)
boxplot(dat1[,'V6'])
which.max(dat1[,'V6'])
summary(dat1[,'V6'])
data_model = lm(V6~., dat1[-116,1:6])
predict(data_model,dat1[-116,1:5])
predict(data_model,dat1[116,1:5])
data_model = lm(V6~., dat1[-116,1:7])
predict(data_model,dat1[116,-6])
data_model = lm(V6~., dat1[-116,1:7])
dat1[-116,6] = predict(data_model,dat1[116,-6])
pairs(data1)
pairs(dat1)
dat1 = read.table("column_2C.dat")
# 应用数据挖掘方法一定要进行异常值检验
# 可以先从数据散点图开始
pairs(dat1) # 发现所有变量都对V6数据偏态分布
boxplot(dat1[,'V6'])
which.max(dat1[,'V6'])
summary(dat1[,'V6'])
dat1 = read.table("column_2C.dat")
dat1 = read.table("column_2C.dat")
rm(list = ls())
dat1 = read.table("column_2C.dat")
# Page47 脊柱数据
# 数据介绍: http://archive.ics.uci.edu/ml/datasets/vertebral+column
# 数据下载: http://archive.ics.uci.edu/ml/machine-learning-databases/00212/
dat1 = read.table("column_2C.dat")
dat1 = read.table("column_2C.dat")
read.table("column_2C.dat")
read.table("column_2C.dat")
read.table("column_3C.dat")
dat1 = read.table("column_3C.dat")
# 应用数据挖掘方法一定要进行异常值检验
# 可以先从数据散点图开始
pairs(dat1) # 发现所有变量都对V6数据偏态分布
boxplot(dat1[,'V6'])
which.max(dat1[,'V6'])
summary(dat1[,'V6'])
# 用回归的方法对数据进行插补
data_model = lm(V6~., dat1[-116,])
dat1[116,6] = predict(data_model,dat1[116,-6])
pairs(dat1) # 发现所有变量都对V6数据偏态分布
boxplot(dat1[,'V6'])
which.max(dat1[,'V6'])
summary(dat1[,'V6'])
dat1 = read.table("column_2C.dat")
dat1 = read.table("column_2C.dat")
# 应用数据挖掘方法一定要进行异常值检验
dat1 = read.table("column_2C.dat")
# 数据介绍: http://archive.ics.uci.edu/ml/datasets/vertebral+column
# 数据下载: http://archive.ics.uci.edu/ml/machine-learning-databases/00212/
dat1 = read.table("column_2C.dat")
dat1 = read.table("column_2C.dat")
# 应用数据挖掘方法一定要进行异常值检验
# 可以先从数据散点图开始
pairs(dat1) # 发现所有变量都对V6数据偏态分布
boxplot(dat1[,'V6'])
which.max(dat1[,'V6'])
summary(dat1[,'V6'])
# 用回归的方法对数据进行插补
data_model = lm(V6~., dat1[-116,])
dat1[116,6] = predict(data_model,dat1[116,-6])
pairs(dat1) # 发现所有变量都对V6数据偏态分布
boxplot(dat1[,'V6'])
which.max(dat1[,'V6'])
summary(dat1[,'V6'])
?glm
a = glm(V7~., dat1, family = 'binomail')
a = glm(V7~., dat1, family = 'binomial')
summary(a)
b = step(a)
summary(b)
?predict
predict(b, dat1)
zz = predict(b, dat1)
zz
plot(zz)
plot(zz,type = 'l')
zz1 = predict(b, dat1, type = 'response')
hist(zz)
exp(zz)/(1+exp(zz))
exp(zz)/(1+exp(zz))[1:10]
tt = exp(zz)/(1+exp(zz))
length(tt)
tt[1:3]
zz1[1:3]
z = (predict(b, dat1, type = 'response') > 0.5 )
table(z)
summary(dat1[,7])
n = dim(dat1)
table(dat1[,7])
z = (predict(b, dat1, type = 'response') < 0.5 )
z = (predict(b, dat1, type = 'response') > 0.5 )
res = rep('AB',n[1])
table(z)
res[z] = 'NO'
table(res)
table(dat1[,7])
zz = table(dat1[,7],res)
zz
sum(zz)
n
(sum(zz) - sum(diag(zz)) )/sum(zz)
summary(b)
summary(dat1)
pairs(dat1)
(sum(predict_table) - sum(diag(predict_table)) )/sum(predict_table)
logistic_model = glm(V7~., dat1, family = 'binomial')
selected_logistic = step(logistic_model)
# 拟合原始数据
model_result = (predict(selected_logistic, dat1, type = 'response') > 0.5 )
n = dim(dat1)
predict_result = rep('AB',n[1])
predict_result[model_result] = 'NO'
# 比较分类对错
predict_table = table(dat1[,7],predict_result)
# 判错率
(sum(predict_table) - sum(diag(predict_table)) )/sum(predict_table)
library(MASS)
lda_model = lda(V7~., dat1)
summary(lda_model)
lda_result = predict(lda_model, dat1)
str(lda_result)
lda_result$class
table(lda_result$class)
table(dat1[,7])
predict_table = table(dat1[,7],lda_result$class)
(sum(predict_table) - sum(diag(predict_table)) )/sum(predict_table)
model_result = (predict(selected_logistic, dat1, type = 'response') > 0.5 )
n = dim(dat1)
predict_result = rep('AB',n[1])
predict_result[model_result] = 'NO'
# 比较分类对错
predict_table = table(dat1[,7],predict_result)
# 判错率
(sum(predict_table) - sum(diag(predict_table)) )/sum(predict_table)
predict_lda_table = table(dat1[,7],lda_result$class)
(sum(predict_lda_table) - sum(diag(predict_lda_table)) )/sum(predict_lda_table)
predict_lda_table
predict_table
print(lda_model)
dat1 = read.table("column_3C.dat")
data_model = lm(V6~., dat1[-116,])
dat1[116,6] = predict(data_model,dat1[116,-6])
lda_model = lda(V7~., dat1)
print(lda_model)
lda_result = predict(lda_model, dat1)
predict_lda_table = table(dat1[,7],lda_result$class)
(sum(predict_lda_table) - sum(diag(predict_lda_table)) )/sum(predict_lda_table)
predict_lda_table
(sum(predict_lda_table) - sum(diag(predict_lda_table)) )/sum(predict_lda_table)
?lda
?qda
library(xlsx)
