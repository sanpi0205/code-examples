set.seed(1234)
data(iris)
?sample
sample(1:10,20)
sample(1:10,20,replace = T)
?formula
index = sample(1:2, nrow(iris), replace=T, prob=c(0.7,0.3))
attach(iris)
trainData = iris[index==1,]
testData = iris[index==2,]
library('party')
install.packages('rpart')
install.packages('party')
library('party')
myFormula = Species~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
class(myFormula)
myFormula = Species~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree = ctree(myFormula, data = trainData)
table(predict(iris_ctree), trainData$Species)
print(iris_ctree)
table(predict(iris_ctree), trainData$Species)
?table
zz = predict(iris_ctree)
zz
zz[1:100]
table(predict(iris_ctree), trainData$Species)
table( trainData$Species, predict(iris_ctree))
?ctree
plot(iris_ctree)
?rpart
library('rpart')
?rpart
iris_tree = rpart(myFormula, data = trainData)
predict(iris_tree)
prediction = predict(iris_tree, newdata = trainData, type = 'class')
prediction
table(prediction,  trainData$Species)
table(trainData$Species, prediction)
print(iris_tree)
plot(iris_tree)
print(iris_ctree)
plot(iris_ctree)
table(trainData$Species, predict(iris_ctree))
preMatrix = table(trainData$Species, predict(iris_ctree))
diag(preMatrix)
sum(diag(preMatrix))
1 - sum(diag(preMatrix)) / sum(preMatrix)
preMatrix = table(trainData$Species, prediction)
1 - sum(diag(preMatrix)) / sum(preMatrix)
library("ElemStatLearn")
install.packages("ElemStatLearn")
library("ElemStatLearn")
data(spam)
head(spam)
?spam
spam$spam = ifelse(spam$spam=="spam", 1, 0)
head(spams)
head(spam)
formula = spam~.
formula
?formula
formula = as.formula("spam~.")
class(formula)
model = as.formula("spam~.")
class(model)
library(rpart)
model_tree = rpart(model, data = spam)
sample(1:2, nrow(spam), replace=T, prob=c(0.7,0.3))
data(spam)
head(spam)
library("ElemStatLearn")
data(spam)
# 构建训练集与测试集合
spam$spam = ifelse(spam$spam=="spam", 1, 0)
index =  sample(1:2, nrow(spam), replace=T, prob=c(0.7,0.3))
train_data = spam[index == 1,]
test_data = spam[index == 2, ]
model_tree = rpart(model, data = train_data)
prediction = predict(model_tree, newdata = test_data, type = 'class')
data(iris)
head(iris)
class(iris$Species)
library("ElemStatLearn")
data(spam)
# 构建训练集与测试集合
spam$spam = ifelse(spam$spam=="spam", 1, 0)
spam$spam = as.factor(spam$spam)
index =  sample(1:2, nrow(spam), replace=T, prob=c(0.7,0.3))
train_data = spam[index == 1,]
test_data = spam[index == 2, ]
# 构建模型
model = as.formula("spam~.")
#### 决策树
library(rpart)
model_tree = rpart(model, data = train_data)
prediction = predict(model_tree, newdata = test_data, type = 'class')
prediction
dim(prediction)
length(prediction)
sum(test_data$spam == prediction)
sum(test_data$spam != prediction)
dicision_tree_erro = sum(test_data$spam != prediction) / length(prediction)
dicision_tree_erro
head(spam)
?rpart
library('party')
?ctree
library('party')
conditinal_inference_tree = ctree(model, data = train_data)
prediction = predict(decision_tree, newdata = test_data)
prediction = predict(conditinal_inference_tree, newdata = test_data)
prediction
error_rate["conditinal_inference_tree"] = sum(test_data$spam != prediction) / length(prediction)
data(spam)
# 构建训练集与测试集合
spam$spam = ifelse(spam$spam=="spam", 1, 0)
spam$spam = as.factor(spam$spam)
index =  sample(1:2, nrow(spam), replace=T, prob=c(0.7,0.3))
train_data = spam[index == 1,]
test_data = spam[index == 2, ]
# 构建模型
model = as.formula("spam~.")
# 错误率list
error_rate = list()
#### 决策树1
library(rpart)
decision_tree = rpart(model, data = train_data)
prediction = predict(decision_tree, newdata = test_data, type = 'class')
error_rate["dicision_tree_erro"] = sum(test_data$spam != prediction) / length(prediction)
### 决策树2
library('party')
conditinal_inference_tree = ctree(model, data = train_data)
prediction = predict(conditinal_inference_tree, newdata = test_data)
error_rate["conditinal_inference_tree"] = sum(test_data$spam != prediction) / length(prediction)
error_rate
?rpart
?spam
?mars
?mars
??mars
?glm
glm_model = glm(model, family = "binomial", data = train_data)
?earth
??earth
install.packages("earth")
library(earth)
?earth
earth.mod <- earth(Volume ~ ., data = trees)
plotmo(earth.mod)
summary(earth.mod, digits = 2, style = "pmax")
glm_model = earth(model, data = train_data, glm=list(family = "binomial"))
glm_model = earth(model, data = spam, glm=list(family = "binomial"))
glm_model\
glm_model
?adaboost
??adaboost
?AdaBoost
??AdaBoost
library("adabag")
library("adabag")
install.packages("adabag")
library("adabag")
adaboost_model = adaboost.M1()
adaboost_model = boosting()
adaboost_model = boosting(model, data = train_data, mfinal = 300)
prediction = predict(adaboost_model, newdata = test_data)
prediction
prediction$votes
prediction$prob
head(prediction$prob)
prediction$class
sum(test_data$spam != prediction$class)
sum(test_data$spam != prediction$class) / length(prediction$class)
error_rate["adaboost"] = sum(test_data$spam != prediction$class) / length(prediction$class)
error_rate
install.packages("mboost")
library(mboost)
AdaExp()
GaussClass()
Gaussian()
Huber(d = NULL)
Laplace()
Poisson()
